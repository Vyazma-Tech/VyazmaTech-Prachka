// <auto-generated />
using System;
using Infrastructure.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240109093251_SplitModelsFromEntities")]
    partial class SplitModelsFromEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ready")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.OrderSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("OrderSubscriptions");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("ActiveFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("ActiveUntil")
                        .HasColumnType("time without time zone");

                    b.Property<DateOnly>("AssignmentDate")
                        .HasColumnType("date");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.QueueSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("QueueSubscriptions");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QueueSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("TelegramId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrderOrderSubscription", b =>
                {
                    b.Property<Guid>("OrderSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderSubscriptionId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("UserOrdersAndTheirSubscriptions", (string)null);
                });

            modelBuilder.Entity("QueueQueueSubscription", b =>
                {
                    b.Property<Guid>("QueueSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QueuesId")
                        .HasColumnType("uuid");

                    b.HasKey("QueueSubscriptionId", "QueuesId");

                    b.HasIndex("QueuesId");

                    b.ToTable("UserQueuesAndTheirSubscriptions", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Order", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.Queue", "Queue")
                        .WithMany("Orders")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.DataAccess.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.OrderSubscription", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.User", "User")
                        .WithOne("OrderSubscription")
                        .HasForeignKey("Infrastructure.DataAccess.Models.OrderSubscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.QueueSubscription", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.User", "User")
                        .WithOne("QueueSubscription")
                        .HasForeignKey("Infrastructure.DataAccess.Models.QueueSubscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderOrderSubscription", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.OrderSubscription", null)
                        .WithMany()
                        .HasForeignKey("OrderSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.DataAccess.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueueQueueSubscription", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.QueueSubscription", null)
                        .WithMany()
                        .HasForeignKey("QueueSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.DataAccess.Models.Queue", null)
                        .WithMany()
                        .HasForeignKey("QueuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Queue", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.User", b =>
                {
                    b.Navigation("OrderSubscription")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("QueueSubscription")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
